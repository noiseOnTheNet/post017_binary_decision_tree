#+ORG2BLOG:
#+DATE: [2024-05-12 dom 22:45]
#+OPTIONS: toc:nil num:nil todo:nil pri:nil tags:nil ^:nil
#+CATEGORY: Machine learning
#+TAGS: Rust
#+DESCRIPTION: Starting a decision tree in Rust
#+TITLE: Hello, Buffer


* Evaluating the effectiveness of the algorithm

* Stopping rules
I'd like to implement three basic stopping rules:
- the current node contains one class only
- the current level is equal to the maximum depth provided by the user
- the current node contains less elements than the minimum decided by the user

I'm not sure about recycling some feature already splitted or not. In case I
decide to recycle them when should I do it? Only when others have been splitted?
Or at every iteration?
* Iterating over rows to do predictions from a dataframe
https://stackoverflow.com/questions/72440403/iterate-over-rows-polars-rust

* Questions
- what kind of analysis can we do?
  - categorical variables and categorical label
    - error can be calculated via accuracy
  - continuous varibale and categorical label
    - error can be calculated via Gini inpurity or Shannon entropy gain
    - iris classical data frame can be compared with scikit-learn example
  - continuous variables and continuous target
    - error can be calculated via MSE, MAE etc
- Which algorithm are we going to use?
  - ID.3 greedy?
  - CART?
- can we use data in the stack?
  - Not easily: we need to access features dynamically
  - Pola.rs looks like a simple choice
- do polars share memory when read and filtered?
  - yes
- what does the tree node contain?
  - the current filtered subdataframe
    - includes its size implicitly
  - optionally, if not leaf:
    - the feature used to split
    - the feature treshold
    - the gain
    - the left and right branch
- how do we build?
  - recursive building of nodes
- which stop rules do we apply?
  - omogeneity of the current sample
  - size of the sample
  - depth level
- how do we predict a list of values?
  - need a specific method
- how do we evaluate overfit?
  - cross validation for depth
- how do we interface the existing tree structure?
  - composition (for extended methods), generic for embedded tree and
    dereferencing?
  - is it possible to have specific methods with just an implementation?
    - by defining a trait on the content type
